{"version":3,"sources":["store.js","components/modal/index.js","components/pagination/index.js","components/table/index.js","utils/utils.js","components/filterType/index.js","components/filterName/index.js","serviceWorker.js","index.js","App.js"],"names":["useMainStore","useContext","MobXProviderContext","mainStore","MainStore","filterName","loading","loadingImage","colorTypes","errors","filterTypes","data","limit","page","modal","value","this","state","types","type","newFilterTypes","filteredByNameData","filteredData","list","filter","item","name","toLowerCase","indexOf","Object","keys","length","map","filtered","push","decorate","observable","computed","setFilter","action","setLoading","setColorTypes","setErrors","setFilterTypes","setData","setLimit","setPage","setModal","setLoadingImage","ModalWrap","wrapImage","useRef","store","useObserver","Modal","open","onClose","BackdropComponent","Backdrop","BackdropProps","timeout","aria-labelledby","aria-describedby","className","onRendered","image","document","createElement","srcset","id","onload","a","fetch","then","resp","json","flavor_text_entries","find","text","language","version","catch","error","desc","current","append","loadImage","ref","CircularProgress","color","flavor_text","Pagination","rowsPerPage","handleChangePage","e","newPage","handleChangeRowsPerPage","target","TablePagination","rowsPerPageOptions","component","count","onChangePage","onChangeRowsPerPage","observer","apiUrl","wrapTable","useEffect","results","getColorByType","message","offset","newList","getItemData","url","respItem","typeItem","console","log","scrollTop","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","TableBody","key","onClick","handleClickItem","sprites","src","alt","Chip","style","backgroundColor","label","stats","Card","stat","base_stat","LinearProgress","variant","FilterType","cx","FilterName","Input","onChange","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","AppBar","position","Toolbar","Typography","index","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea037db3.chunk.js","sourcesContent":["import { observable, action, computed, decorate } from 'mobx';\r\nimport { useContext } from 'react';\r\nimport { MobXProviderContext } from 'mobx-react';\r\n\r\nexport function useStores() {\r\n\treturn useContext(MobXProviderContext);\r\n};\r\n\r\nexport function useMainStore() {\r\n\tconst { mainStore } = useStores();\r\n\treturn mainStore;\r\n};\r\n\r\nexport class MainStore {\r\n\tfilterName = '';\r\n\tloading = true;\r\n\tloadingImage = false;\r\n\tcolorTypes = {};\r\n\terrors = [];\r\n\tfilterTypes = {};\r\n\tdata = {};\r\n\tlimit = 10;\r\n\tpage = 0;\r\n\tmodal = false;\r\n\r\n\tsetFilter(value) {\r\n\t\tthis.filterName = value;\r\n\t}\r\n\r\n\tsetLoading(state) {\r\n\t\tthis.loading = state;\r\n\t}\r\n\r\n\tsetColorTypes(types) {\r\n\t\tthis.colorTypes = types;\r\n\t}\r\n\r\n\tsetErrors(errors) {\r\n\t\tthis.errors = errors;\r\n\t}\r\n\r\n\tsetFilterTypes(type) {\r\n\t\tconst newFilterTypes = {...this.filterTypes};\r\n\r\n\t\tif (newFilterTypes[type]) {\r\n\t\t\tdelete newFilterTypes[type];\r\n\t\t} else {\r\n\t\t\tnewFilterTypes[type] = true;\r\n\t\t}\r\n\r\n\t\tthis.filterTypes = newFilterTypes;\r\n\t}\r\n\r\n\tsetData(data) {\r\n\t\tthis.data = data;\r\n\t}\r\n\r\n\tsetLimit(limit) {\r\n\t\tthis.limit = limit;\r\n\t\tthis.loading = true;\r\n\t}\r\n\t\r\n\tsetPage(page) {\r\n\t\tthis.page = page;\r\n\t\tthis.loading = true;\r\n\t}\r\n\t\r\n\tsetModal(data) {\r\n\t\tthis.modal = data;\r\n\t\tthis.loadingImage = true;\r\n\t}\r\n\r\n\tsetLoadingImage(state) {\r\n\t\tthis.loadingImage = state;\r\n\t}\r\n\r\n\tget filteredData() {\r\n\t\tlet filteredByNameData = [], filteredData = [];\r\n\r\n\t\tif (this.filterName && this.data.list) {\r\n\t\t\tfilteredByNameData = this.data.list.filter(item => item.name.toLowerCase().indexOf(this.filterName.toLowerCase()) !== -1);\r\n\t\t} else {\r\n\t\t\tfilteredByNameData = this.data.list ? this.data.list : [];\r\n\t\t}\r\n\t\t\r\n\t\tif (Object.keys(this.filterTypes).length && filteredByNameData.length) {\r\n\t\t\tfilteredByNameData.map(item => {\r\n\t\t\t\tlet filtered = false;\r\n\r\n\t\t\t\titem.types.map(type => {\r\n\t\t\t\t\tif (this.filterTypes[type.type.name]) {\r\n\t\t\t\t\t\tfiltered = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tfiltered && filteredData.push(item);\r\n\t\t\t\t\r\n\t\t\t\treturn null;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tfilteredData = filteredByNameData;\r\n\t\t}\r\n\r\n\t\treturn filteredData;\r\n\t}\r\n};\r\n\r\ndecorate (MainStore, {\r\n\tfilterName: observable,\r\n\tloading: observable,\r\n\tloadingImage: observable,\r\n\tcolorTypes: observable,\r\n\terrors: observable,\r\n\tfilterTypes: observable,\r\n\tdata: observable,\r\n\tlimit: observable,\r\n\tpage: observable,\r\n\tmodal: observable,\r\n\tfilteredData: computed,\r\n\tsetFilter: action,\r\n\tsetLoading: action,\r\n\tsetColorTypes: action,\r\n\tsetErrors: action,\r\n\tsetFilterTypes: action,\r\n\tsetData: action,\r\n\tsetLimit: action,\r\n\tsetPage: action,\r\n\tsetModal: action,\r\n\tsetLoadingImage: action\r\n});","import React, { useRef } from 'react';\r\nimport { CircularProgress, Modal, Backdrop } from '@material-ui/core';\r\nimport { useMainStore } from '../../store';\r\nimport { useObserver } from 'mobx-react';\r\n\r\nexport default function ModalWrap() {\r\n    const\r\n        wrapImage = useRef(null),\r\n        store = useMainStore();\r\n\r\n    const getAdditional = (id) => {\r\n\t\treturn fetch(`https://pokeapi.co/api/v2/pokemon-species/${id}`)\r\n\t\t\t.then(resp => resp.json())\r\n\t\t\t.then(async resp => {\r\n\t\t\t\tif (resp) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...resp.flavor_text_entries.find(text => text.language.name === 'en' && text.version.name === 'x')\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}).catch(error => {\r\n\t\t\t\treturn {};\r\n\t\t\t});\r\n\t};\r\n\r\n    const loadImage = (item) => {\r\n\t\tconst image = document.createElement('img');\r\n\t\timage.srcset = `https://pokeres.bastionbot.org/images/pokemon/${store.modal.id}.png`;\r\n\t\t\r\n\t\timage.onload = async () => {\r\n\t\t\titem.desc = await getAdditional(item.id);\r\n            wrapImage.current.append(image);\r\n            store.setLoadingImage(false);\r\n\t\t};\r\n\t};\r\n\r\n    return useObserver(() => (\r\n        <Modal\r\n            open={store.modal ? true : false}\r\n            onClose={() => {store.setModal(false)}}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500,\r\n            }}\r\n            aria-labelledby=\"transition-modal-title\"\r\n            aria-describedby=\"transition-modal-description\"\r\n            className=\"modal\"\r\n            onRendered={() => {loadImage(store.modal)}}\r\n        >\r\n            <div className=\"modal__body\">\r\n                {!store.loadingImage && <div className=\"modal__title\">{store.modal.name}</div>}\r\n\r\n                <div className=\"modal__image\" ref={wrapImage}>\r\n                    {store.loadingImage && <div className=\"progress\">\r\n                        <CircularProgress color=\"primary\"/>\r\n                    </div>}\r\n                </div>\r\n\r\n                {store.modal.desc && <div className=\"modal__desc\">{store.modal.desc.flavor_text}</div>}\r\n            </div>\r\n        </Modal>\r\n    ));\r\n};","import React from 'react';\r\nimport { useObserver } from 'mobx-react';\r\nimport { useMainStore } from '../../store';\r\nimport { TablePagination } from '@material-ui/core';\r\n\r\nexport default function Pagination() {\r\n\tconst\r\n\t\tstore = useMainStore(),\r\n\t\trowsPerPage = [10, 20, 50];\r\n\t\t\r\n\tconst handleChangePage = (e, newPage) => {\r\n\t\tstore.setPage(newPage);\r\n\t};\r\n\t\r\n\tconst handleChangeRowsPerPage = ({ target }) => {\r\n\t\tstore.setLimit(target.value);\r\n\t};\r\n\r\n\treturn useObserver(() => (\r\n\t\t<TablePagination\r\n\t\t\trowsPerPageOptions={rowsPerPage}\r\n\t\t\tcomponent=\"div\"\r\n\t\t\tcount={store.data.count ? store.data.count : 0}\r\n\t\t\trowsPerPage={store.limit}\r\n\t\t\tpage={store.page}\r\n\t\t\tonChangePage={handleChangePage}\r\n\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\r\n\t\t\tclassName=\"pagination\"\r\n\t\t/>\r\n\t));\r\n};","import React, { useEffect, useRef } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useMainStore } from '../../store';\r\nimport { TableContainer, Table, TableHead, TableBody, TableRow, TableCell, Chip, Card, LinearProgress } from '@material-ui/core';\r\nimport { getColorByType } from '../../utils/utils';\r\n\r\nfunction TableComponent() {\r\n\tconst\r\n\t\tapiUrl = 'https://pokeapi.co/api/v2',\r\n\t\twrapTable = useRef(null),\r\n\t\tstore = useMainStore();\r\n\t\r\n\tuseEffect(() => {\r\n\t\tconst getTypes = () => {\r\n\t\t\tfetch(`${apiUrl}/type/`)\r\n\t\t\t\t.then(resp => resp.json())\r\n\t\t\t\t.then(resp => {\r\n\t\t\t\t\tif (resp && resp.results) {\r\n\t\t\t\t\t\tconst colorTypes = {};\r\n\t\t\t\t\t\tresp.results.map(item => { colorTypes[item.name] = getColorByType(item.name); return null; });\r\n\t\t\t\t\t\tstore.setColorTypes(colorTypes);\r\n\t\t\t\t\t}\r\n\t\t\t\t}).catch(error => {\r\n\t\t\t\t\tstore.setLoading(false);\r\n\t\t\t\t\tstore.setErrors([error.message]);\r\n\t\t\t\t});\r\n\t\t};\r\n\r\n\t\tgetTypes();\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst getMainData = (limit, offset) => {\r\n\t\t\tfetch(`${apiUrl}/pokemon/?limit=${limit}&offset=${offset}`)\r\n\t\t\t\t.then(resp => resp.json())\r\n\t\t\t\t.then(async resp => {\r\n\t\t\t\t\tif (resp && resp.results) {\r\n\t\t\t\t\t\tconst newList = [];\r\n\t\r\n\t\t\t\t\t\tfor (let item of resp.results) {\r\n\t\t\t\t\t\t\tnewList.push(await getItemData(item.url));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tstore.setData({ count: resp.count, list: newList });\r\n\t\t\t\t\t\tstore.setLoading(false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}).catch(error => {\r\n\t\t\t\t\tstore.setLoading(false);\r\n\t\t\t\t\tstore.setErrors([error.message]);\r\n\t\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\tgetMainData(store.limit, store.page * store.limit);\r\n\t}, [store.limit, store.page]);\r\n\r\n\tconst getItemData = (url) => {\r\n\t\treturn fetch(url)\r\n\t\t\t.then(respItem => respItem.json())\r\n\t\t\t.then(respItem => {\r\n\t\t\t\trespItem.types && respItem.types.map(typeItem => {\r\n\t\t\t\t\ttypeItem.color = store.colorTypes[typeItem.type.name];\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t});\r\n\t\t\t\treturn respItem;\r\n\t\t\t}).catch(error => console.log(error.message));\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\twrapTable.current.scrollTop = 0;\r\n\t}, [store.data]);\r\n\r\n\tconst handleClickItem = (item) => {\r\n\t\tstore.setModal(item);\r\n\t};\r\n\t\r\n\tconst normalise = value => (value - 0) * 100 / (200 - 0);\r\n\t\r\n\treturn (\r\n\t\t<TableContainer className=\"wrap-table\" ref={wrapTable}>\r\n\t\t\t<Table stickyHeader aria-label=\"sticky table\" className=\"table\" color=\"secondary\">\r\n\t\t\t\t<TableHead>\r\n\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t<TableCell align=\"center\" className=\"table__head-cell\">Image</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"center\" className=\"table__head-cell\">Name</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"center\" className=\"table__head-cell\">Types</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"center\" className=\"table__head-cell\">Stats</TableCell>\r\n\t\t\t\t\t</TableRow>\r\n\t\t\t\t</TableHead>\r\n\r\n\t\t\t\t<TableBody>\r\n\t\t\t\t\t{store.filteredData.map(item => <TableRow key={item.name} className=\"table__row\" onClick={() => handleClickItem(item)}>\r\n\t\t\t\t\t\t<TableCell align=\"center\" className=\"table__cell table__cell--pic\">\r\n\t\t\t\t\t\t\t{item.sprites && <div className=\"picture\">\r\n\t\t\t\t\t\t\t\t<img src={item.sprites['front_default']} alt={item.name}/>\r\n\t\t\t\t\t\t\t</div>}\r\n\t\t\t\t\t\t</TableCell>\r\n\r\n\t\t\t\t\t\t<TableCell align=\"center\" className=\"table__cell table__cell--name\">\r\n\t\t\t\t\t\t\t<div className=\"name\">{item.name}</div>\r\n\t\t\t\t\t\t</TableCell>\r\n\r\n\t\t\t\t\t\t<TableCell align=\"center\" className=\"table__cell\">\r\n\t\t\t\t\t\t\t<div className=\"table__types\"> \r\n\t\t\t\t\t\t\t\t{item.types && item.types.map(type =>\r\n\t\t\t\t\t\t\t\t\t<Chip\r\n\t\t\t\t\t\t\t\t\t\tkey={type.type.name}\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"type\"\r\n\t\t\t\t\t\t\t\t\t\tstyle={{backgroundColor: type.color}}\r\n\t\t\t\t\t\t\t\t\t\tlabel={type.type.name}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</TableCell>\r\n\r\n\t\t\t\t\t\t<TableCell align=\"center\" className=\"table__cell\">\r\n\t\t\t\t\t\t\t{item.stats && <Card className=\"list\">\r\n\t\t\t\t\t\t\t\t{item.stats.map(stat =>\r\n\t\t\t\t\t\t\t\t\t<div key={stat.stat.name} className=\"stat\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"stat__title\">\r\n\t\t\t\t\t\t\t\t\t\t\t{stat.stat.name}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"stat__wrap\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"stat__label\">{stat.base_stat}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t<LinearProgress\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={normalise(stat.base_stat)}\r\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"determinate\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"stat__progress\"\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</Card>}\r\n\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t</TableRow> )}\r\n\t\t\t\t</TableBody>\r\n\t\t\t</Table>\r\n\t\t</TableContainer>\r\n\t);\r\n};\r\n\r\nexport default observer(TableComponent);","export function getColorByType(type) {\r\n\tswitch (type) {\r\n\t\tcase 'normal':\r\n\t\t\treturn '#9a9a9a';\r\n\t\tcase 'fighting':\r\n\t\t\treturn '#2b44d8';\r\n\t\tcase 'flying':\r\n\t\t\treturn '#7bd8ea';\r\n\t\tcase 'poison':\r\n\t\t\treturn '#afc741';\r\n\t\tcase 'ground':\r\n\t\t\treturn '#382929';\r\n\t\tcase 'rock':\r\n\t\t\treturn '#545454';\r\n\t\tcase 'bug':\r\n\t\t\treturn '#000000';\r\n\t\tcase 'ghost':\r\n\t\t\treturn '#8c9ca5';\r\n\t\tcase 'steel':\r\n\t\t\treturn '#8395ff';\r\n\t\tcase 'fire':\r\n\t\t\treturn '#f9414d'; \r\n\t\tcase 'water':\r\n\t\t\treturn '#1180bb';\r\n\t\tcase 'grass':\r\n\t\t\treturn '#2a5f2f';\r\n\t\tcase 'electric':\r\n\t\t\treturn '#eccd30';\r\n\t\tcase 'psychic':\r\n\t\t\treturn '#f049ff';\r\n\t\tcase 'ice':\r\n\t\t\treturn '#0099fd';\r\n\t\tcase 'dragon':\r\n\t\t\treturn '#de4e01';\r\n\t\tcase 'dark':\r\n\t\t\treturn '#313131';\r\n\t\tcase 'fairy':\r\n\t\t\treturn '#6e2ede';\r\n\t\tcase 'unknown':\r\n\t\t\treturn '#000000';\r\n\t\tcase 'shadow':\r\n\t\t\treturn '#ffbfc9';\r\n\t\tdefault:\r\n\t\t\treturn '#ffffff'\r\n\t}\r\n};","import React from 'react';\r\nimport { useObserver } from 'mobx-react';\r\nimport { useMainStore } from '../../store';\r\nimport cx from 'classnames';\r\n\r\nexport default function FilterType() {\r\n\tconst store = useMainStore();\r\n\r\n\treturn useObserver(() => (\r\n\t\t<div className=\"filterType\">\r\n\t\t\t<div className=\"filterType__title\">Filter by type:</div>\r\n\r\n\t\t\t{store.colorTypes && <div className=\"filterType__list\">\r\n\t\t\t\t{Object.keys(store.colorTypes).map(type =>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tkey={type}\r\n\t\t\t\t\t\tclassName={cx('filterType__item', {'filterType__item--active': store.filterTypes[type]})}\r\n\t\t\t\t\t\tstyle={{backgroundColor: store.colorTypes[type]}}\r\n\t\t\t\t\t\tonClick={() => {store.setFilterTypes(type)}}\r\n\t\t\t\t\t>{type}</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>}\r\n\t\t</div>\r\n\t));\r\n};","import React from 'react';\r\nimport { useObserver } from 'mobx-react';\r\nimport { Input } from '@material-ui/core';\r\nimport { useMainStore } from '../../store';\r\n\r\nexport default function FilterName() {\r\n\tconst store = useMainStore();\r\n\r\n\treturn useObserver(() => (\r\n\t\t<div className=\"filterName\">\r\n\t\t\t<div className=\"filterName__title\">Filter by name:</div>\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<Input\r\n\t\t\t\t\tvalue={store.filterName}\r\n\t\t\t\t\tonChange={({target}) => {store.setFilter(target.value)}}\r\n\t\t\t\t\tclassName=\"filterName__input\"\r\n\t\t\t\t\tplaceholder=\"Enter name...\"\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t));\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"mobx-react\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MainStore } from './store';\n\nconst store = new MainStore();\n\nReactDOM.render(\n\t<Provider mainStore={store}>\n\t\t<App />\n\t</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { useObserver } from 'mobx-react';\nimport { useMainStore } from './store';\nimport './App.scss';\nimport { AppBar, Toolbar, Typography, CircularProgress } from '@material-ui/core';\nimport ModalWrap from './components/modal';\nimport Pagination from './components/pagination';\nimport TableComponent from './components/table';\nimport FilterType from './components/filterType';\nimport FilterName from './components/filterName';\n\nexport default function App() {\n\tconst store = useMainStore();\n\t\n\treturn useObserver(() => (\n\t\t<div className=\"App\">\n\t\t\t<AppBar position=\"static\" color=\"primary\">\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<Typography variant=\"h4\" className=\"title\">Pokedex</Typography>\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\n\t\t\t{store.errors && store.errors.length > 0 ? <div className=\"error\">\n\t\t\t\t{store.errors.map((error, index) => <div key={index}>{error}</div>)}\n\t\t\t</div> : <div className=\"main\">\n\t\t\t\t{store.loading && <div className=\"progress\">\n\t\t\t\t\t<CircularProgress color=\"primary\"/>\n\t\t\t\t</div>}\n\n\t\t\t\t<FilterName />\n\t\t\t\t<FilterType />\n\t\t\t\t<TableComponent />\n\t\t\t\t<Pagination />\n\t\t\t</div>}\n\n\t\t\t<ModalWrap />\n\t\t</div>\n\t));\n};"],"sourceRoot":""}